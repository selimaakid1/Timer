{"version":3,"sources":["logo.svg","Time.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Time","props","start","state","inter","setState","reset","count","setInterval","this","seconds","parseInt","minutes","hours","className","Button","variant","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,0ICgE5BC,E,YA3DX,WAAYC,GAAQ,IAAD,8BAEf,4CAAMA,KASVC,MAAQ,WACC,EAAKC,MAAMC,MAKZ,EAAKC,SAAS,CAAED,OAAO,IAJvB,EAAKC,SAAS,CACVD,OAAO,KAdA,EAoBnBE,MAAQ,WACJ,EAAKD,SAAS,CAAEE,MAAO,EAAGH,OAAO,KAlBjC,EAAKD,MAAQ,CACTI,MAAO,EACPH,OAAO,GAEXI,aAAY,WACR,EAAKL,MAAMC,OAAS,EAAKC,SAAS,CAAEE,MAAQ,EAAKJ,MAAMI,MAAQ,QAChE,KATY,E,sEAwBT,IACEA,EAAUE,KAAKN,MAAfI,MAEJG,GADeC,SAAUJ,EAAQ,IAAQ,KAC/BI,SAAUJ,EAAQ,IAAQ,KACpCK,EAAUD,SAAUJ,EAAK,IAAkB,IAC3CM,EAAQF,SAAUJ,EAAK,KAAuB,IAKlD,OAJAM,EAASA,EAAQ,GAAM,IAAMA,EAAQA,EACrCD,EAAWA,EAAU,GAAM,IAAMA,EAAUA,EAC3CF,EAAWA,EAAU,GAAM,IAAMA,EAAUA,EAEnC,yBAAKI,UAAU,iBACnB,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,eACVD,EADL,MACeD,EADf,MAC2BF,GAE3B,yBAAKI,UAAU,qBACX,yBAAKA,UAAU,YAAf,QACA,yBAAKA,UAAU,YAAf,UACA,yBAAKA,UAAU,YAAf,WAEJ,yBAAKA,UAAU,cACX,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBF,UAAU,WAAUG,QAASR,KAAKP,OAApE,SACA,kBAACa,EAAA,EAAD,CAAQC,QAAQ,eAAeF,UAAU,WAAWG,QAASR,KAAKH,OAAlE,gB,GA/CDY,aCSJC,MARf,WACE,OACE,yBAAKL,UAAU,OACZ,kBAAC,EAAD,QCIaM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48508065.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport './App.css'\nimport Button from 'react-bootstrap/Button'\n\nclass Time extends Component {\n    constructor(props) {\n\n        super(props)\n        this.state = {\n            count: 0,\n            inter: false\n        }\n        setInterval(() => {\n            this.state.inter && this.setState({ count: (this.state.count + 1000) })\n        }, 1000)\n    }\n    start = () => {\n        if (!this.state.inter) {\n            this.setState({\n                inter: true\n            })\n        } else {\n            this.setState({ inter: false })\n        }\n    }\n    reset = () => {\n        this.setState({ count: 0, inter: false })\n    }\n   \n    render() {\n        const { count } = this.state\n        var milliseconds = parseInt((count % 1000) / 100)\n        var seconds = parseInt((count / 1000) % 60)\n        var minutes = parseInt((count / (1000 * 60)) % 60)\n        var hours = parseInt((count / (1000 * 60 * 60)) % 24)\n        hours = (hours < 10) ? '0' + hours : hours\n        minutes = (minutes < 10) ? '0' + minutes : minutes\n        seconds = (seconds < 10) ? '0' + seconds : seconds\n\n        return (<div className='timeContainer'>\n            <div className='timeContainer1'>\n                <div className='timeNumbers'>\n                    {hours} : {minutes} : {seconds}\n                </div>\n                <div className='timeTextContainer'>\n                    <div className='timeText'>Hour</div>\n                    <div className='timeText'>Minute</div>\n                    <div className='timeText'>Second</div>\n                </div>\n                <div className='timeButton'>\n                    <Button variant=\"outline-success\" className='startBtn'onClick={this.start}>Start</Button>\n                    <Button variant=\"outline-dark\" className='resetBtn' onClick={this.reset}>Reset</Button>\n                </div>\n            </div>\n        </div>\n\n        )\n\n    }\n}\n\n\n\n\nexport default Time;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Time from './Time'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Time />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}